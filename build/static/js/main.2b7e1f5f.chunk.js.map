{"version":3,"sources":["components/InfoBox.js","components/LineGraph.js","components/CircleMap.js","components/Map.js","components/Table.js","components/util.js","App.js","index.js"],"names":["InfoBox","title","newCases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","country","useState","setData","setType","generateChartData","data_","chartData","lastDateNumbers","date","newPoint","Object","keys","length","x","y","push","useEffect","a","url","fetch","then","response","json","timeline","fetchData","classes","FormControl","Select","onChange","event","target","MenuItem","datasets","backgroundColor","borderColor","casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","CircleMap","casesType","map","i","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","backgroundPosition","ChangeView","zoom","useMap","setView","Map","countries","MapContainer","TileLayer","attribution","Table","sortData","sortedData","sort","b","prettyPrintStat","stat","App","setCountries","selectedCountry","setSelectedCountry","setcountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","getCountries","name","iso2","getWorldInfo","onCountryChange","countryCode","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b7e1f5f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport './InfoBox.css';\r\n\r\nfunction InfoBox({ title, newCases, active, isRed, total, ...props }) {\r\n\treturn (\r\n\t\t<Card\r\n\t\t\tonClick={props.onClick}\r\n\t\t\tclassName={`infoBox ${active && 'infoBox--selected'} ${isRed &&\r\n\t\t\t\tactive &&\r\n\t\t\t\t'infoBox--red'}`}\r\n\t\t>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<h2 className={`infoBox__cases ${!isRed && 'infoBox__cases--green'}`}>\r\n\t\t\t\t\t<div>{newCases}</div>{' '}\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName={`infoBox__today ${!isRed && 'infoBox__cases--green'}`}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tToday\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</h2>\r\n\t\t\t\t<Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n\t\t\t\t\t{total}\r\n\t\t\t\t</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default InfoBox;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\nimport './LineGraph.css';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\tmargin: theme.spacing(1),\r\n\t\tminWidth: 120\r\n\t}\r\n}));\r\n\r\nconst options = {\r\n\tlegend: {\r\n\t\tdisplay: false\r\n\t},\r\n\telements: {\r\n\t\tpoint: {\r\n\t\t\tradius: 0\r\n\t\t}\r\n\t},\r\n\tmaintainAspectRatio: false,\r\n\ttooltips: {\r\n\t\tmode: 'index',\r\n\t\tintersect: false,\r\n\t\tcallbacks: {\r\n\t\t\tlabel: function(tooltipItem, data) {\r\n\t\t\t\treturn numeral(tooltipItem.value).format('+0,0');\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tscales: {\r\n\t\txAxes: [\r\n\t\t\t{\r\n\t\t\t\ttype: 'time',\r\n\t\t\t\ttime: {\r\n\t\t\t\t\tformat: 'MM/DD/YY',\r\n\t\t\t\t\ttooltipFormat: 'll'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\tyAxes: [\r\n\t\t\t{\r\n\t\t\t\tgridLines: {\r\n\t\t\t\t\tdisplay: false\r\n\t\t\t\t},\r\n\t\t\t\tticks: {\r\n\t\t\t\t\tcallback: function(value, index, values) {\r\n\t\t\t\t\t\treturn numeral(value).format('0a');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n};\r\n\r\nfunction LineGraph({ country = 'Worldwide' }) {\r\n\tconst [ data, setData ] = useState([]);\r\n\tconst [ type, setType ] = useState('cases');\r\n\r\n\tconst generateChartData = (data_, type = 'cases') => {\r\n\t\tconst chartData = [];\r\n\t\tconst lastDateNumbers = {};\r\n\t\tfor (const date in data_[type]) {\r\n\t\t\tconst newPoint = {};\r\n\t\t\tif (Object.keys(lastDateNumbers).length) {\r\n\t\t\t\tnewPoint.x = date;\r\n\t\t\t\tnewPoint.y = data_[type][date] - lastDateNumbers[type];\r\n\t\t\t}\r\n\t\t\tchartData.push(newPoint);\r\n\t\t\tlastDateNumbers[type] = data_[type][date];\r\n\t\t}\r\n\r\n\t\treturn chartData;\r\n\t};\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconst fetchData = async () => {\r\n\t\t\t\tconst url =\r\n\r\n\t\t\t\t\t\tcountry ===\r\n\t\t\t\t\t\t'Worldwide' ? 'https://disease.sh/v3/covid-19/historical/all?lastdays=200' :\r\n\t\t\t\t\t\t`https://disease.sh/v3/covid-19/historical/${country}?lastdays=200\r\n\t\t\t\t`;\r\n\r\n\t\t\t\tawait fetch(url)\r\n\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\treturn response.json();\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((data) => {\r\n\t\t\t\t\t\t//console.log(data);\r\n\r\n\t\t\t\t\t\tconst chartData =\r\n\r\n\t\t\t\t\t\t\t\tcountry === 'Worldwide' ? generateChartData(data, type) :\r\n\t\t\t\t\t\t\t\tgenerateChartData(data.timeline, type);\r\n\t\t\t\t\t\tsetData(chartData);\r\n\t\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\tfetchData();\r\n\t\t},\r\n\t\t[ type ]\r\n\t);\r\n\r\n\tconst onTypeChange = (event) => {\r\n\t\tsetType(event.target.value);\r\n\t};\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className=\"LineGraph\">\r\n\t\t\t<div className=\"LineGraph__title\">\r\n\t\t\t\t<h3> {country} New </h3>\r\n\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t<Select value={type} onChange={onTypeChange}>\r\n\t\t\t\t\t\t<MenuItem value=\"cases\"> Cases </MenuItem>\r\n\t\t\t\t\t\t<MenuItem value=\"deaths\"> Deaths </MenuItem>\r\n\t\t\t\t\t\t<MenuItem value=\"recovered\"> Recovered </MenuItem>\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t</FormControl>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"LineGraph__line\">\r\n\t\t\t\t<Line\r\n\t\t\t\t\toptions={options}\r\n\t\t\t\t\tdata={{\r\n\t\t\t\t\t\tdatasets: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbackgroundColor: 'rgba(204, 16, 52 , 0.4)',\r\n\t\t\t\t\t\t\t\tborderColor: '#CC1034',\r\n\t\t\t\t\t\t\t\tdata: data\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default LineGraph;\r\n\r\n// 2:58:20\r\n","import React from 'react';\r\nimport { Circle, Popup } from 'react-leaflet';\r\nimport numeral from 'numeral';\r\nimport LineGraph from './LineGraph';\r\n\r\nconst casesTypeColors = {\r\n\tcases: {\r\n\t\thex: '#CC1034',\r\n\t\trgb: 'rgb(204, 16, 52)',\r\n\t\thalf_op: 'rgba(204, 16, 52, 0.5)',\r\n\t\tmultiplier: 250\r\n\t},\r\n\trecovered: {\r\n\t\thex: '#7dd71d',\r\n\t\trgb: 'rgb(125, 215, 29)',\r\n\t\thalf_op: 'rgba(125, 215, 29, 0.5)',\r\n\t\tmultiplier: 300\r\n\t},\r\n\tdeaths: {\r\n\t\thex: '#fb4443',\r\n\t\trgb: 'rgb(251, 68, 67)',\r\n\t\thalf_op: 'rgba(251, 68, 67, 0.5)',\r\n\t\tmultiplier: 1000\r\n\t}\r\n};\r\n\r\nfunction CircleMap({ data, casesType }) {\r\n\treturn data.map((country, i) => {\r\n\t\t//console.log(country);\r\n\t\t// console.log(casesTypeColors[casesType].hex);\r\n\t\treturn (\r\n\t\t\t<Circle\r\n\t\t\t\tkey={i}\r\n\t\t\t\tcenter={[ country.countryInfo.lat, country.countryInfo.long ]}\r\n\t\t\t\tcolor={casesTypeColors[casesType].rgb}\r\n\t\t\t\tfillColor={casesTypeColors[casesType].rgb}\r\n\t\t\t\tfillOpacity={0.4}\r\n\t\t\t\tradius={\r\n\t\t\t\t\tMath.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t<Popup>\r\n\t\t\t\t\t<div className=\"info-container\">\r\n\t\t\t\t\t\t<div className=\"info-name\">\r\n\t\t\t\t\t\t\t<div>{country.country}</div>\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclassName=\"info-flag\"\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tbackgroundImage: `url(${country.countryInfo.flag})`,\r\n\t\t\t\t\t\t\t\t\tbackgroundPosition: 'center'\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"info-confirmed\">\r\n\t\t\t\t\t\t\tCases: {numeral(country.cases).format('0,0')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"info-recovered\">\r\n\t\t\t\t\t\t\tRecovered: {numeral(country.recovered).format('0,0')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"info-deaths\">\r\n\t\t\t\t\t\t\tDeaths: {numeral(country.deaths).format('0,0')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<LineGraph country={country.country} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Popup>\r\n\t\t\t</Circle>\r\n\t\t);\r\n\t});\r\n}\r\n\r\nexport default CircleMap;\r\n","import React from 'react';\r\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet';\r\n//import { showDataOnMap } from './util';\r\nimport CircleMap from './CircleMap';\r\nimport './Map.css';\r\n\r\nfunction ChangeView({ center, zoom }) {\r\n\tconst map = useMap();\r\n\tmap.setView(center, zoom);\r\n\treturn null;\r\n}\r\n\r\nfunction Map({ center, zoom, countries, casesType }) {\r\n\treturn (\r\n\t\t<div className=\"map\">\r\n\t\t\t<MapContainer center={center} zoom={zoom}>\r\n\t\t\t\t<ChangeView center={center} zoom={zoom} />\r\n\t\t\t\t<TileLayer\r\n\t\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n\t\t\t\t\tattribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n\t\t\t\t/>\r\n\t\t\t\t<CircleMap data={countries} casesType={casesType} />\r\n\t\t\t\t{/* {showDataOnMap(countries, zoom, casesType)} */}\r\n\t\t\t</MapContainer>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({ countries }) {\r\n\treturn (\r\n\t\t<div className=\"table\">\r\n\t\t\t<table>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{countries.map(({ country, cases }, i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<tr key={i}>\r\n\t\t\t\t\t\t\t\t<td>{country}</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<strong>{numeral(cases).format('0,0')}</strong>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\nimport LineGraph from './LineGraph';\r\n\r\nconst casesTypeColors = {\r\n\tcases: {\r\n\t\thex: '#CC1034',\r\n\t\trgb: 'rgb(204, 16, 52)',\r\n\t\thalf_op: 'rgba(204, 16, 52, 0.5)',\r\n\t\tmultiplier: 250\r\n\t},\r\n\trecovered: {\r\n\t\thex: '#7dd71d',\r\n\t\trgb: 'rgb(125, 215, 29)',\r\n\t\thalf_op: 'rgba(125, 215, 29, 0.5)',\r\n\t\tmultiplier: 300\r\n\t},\r\n\tdeaths: {\r\n\t\thex: '#fb4443',\r\n\t\trgb: 'rgb(251, 68, 67)',\r\n\t\thalf_op: 'rgba(251, 68, 67, 0.5)',\r\n\t\tmultiplier: 1000\r\n\t}\r\n};\r\n\r\nexport const sortData = (data) => {\r\n\tconst sortedData = [ ...data ];\r\n\r\n\tsortedData.sort((a, b) => {\r\n\t\tif (a.cases > b.cases) {\r\n\t\t\treturn -1;\r\n\t\t} else {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t});\r\n\r\n\treturn sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n\r\n\t\tstat ? `${numeral(stat).format('0.0a')}` :\r\n\t\t'+0';\r\n\r\nexport const showDataOnMap = (data, zoom, casesType = 'cases') => {\r\n\treturn data.map((country) => {\r\n\t\t//console.log(country);\r\n\t\tconsole.log(casesTypeColors[casesType].hex);\r\n\t\treturn (\r\n\t\t\t<Circle\r\n\t\t\t\tcenter={[ country.countryInfo.lat, country.countryInfo.long ]}\r\n\t\t\t\tcolor={casesTypeColors[casesType].hex}\r\n\t\t\t\tfillColor={casesTypeColors[casesType].hex}\r\n\t\t\t\tfillOpacity={0.4}\r\n\t\t\t\tradius={\r\n\t\t\t\t\tMath.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t<Popup>\r\n\t\t\t\t\t<div className=\"info-container\">\r\n\t\t\t\t\t\t<div className=\"info-name\">\r\n\t\t\t\t\t\t\t<div>{country.country}</div>\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclassName=\"info-flag\"\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tbackgroundImage: `url(${country.countryInfo.flag})`,\r\n\t\t\t\t\t\t\t\t\tbackgroundPosition: 'center'\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"info-confirmed\">\r\n\t\t\t\t\t\t\tCases: {numeral(country.cases).format('0,0')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"info-recovered\">\r\n\t\t\t\t\t\t\tRecovered: {numeral(country.recovered).format('0,0')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"info-deaths\">\r\n\t\t\t\t\t\t\tDeaths: {numeral(country.deaths).format('0,0')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<LineGraph country={country.country} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Popup>\r\n\t\t\t</Circle>\r\n\t\t);\r\n\t});\r\n};\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { Card, CardContent } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport InfoBox from './components/InfoBox';\nimport Map from './components/Map';\nimport Table from './components/Table';\nimport { sortData, prettyPrintStat } from './components/util';\nimport LineGraph from './components/LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nconst useStyles = makeStyles((theme) => ({\n\tformControl: {\n\t\tmargin: theme.spacing(1),\n\t\tminWidth: 120\n\t}\n}));\n\nfunction App() {\n\tconst classes = useStyles();\n\n\tconst [ countries, setCountries ] = useState([]);\n\tconst [ selectedCountry, setSelectedCountry ] = useState('Worldwide');\n\tconst [ countryInfo, setcountryInfo ] = useState({});\n\tconst [ tableData, setTableData ] = useState([]);\n\tconst [ mapCenter, setMapCenter ] = useState({ lat: 34.80746, lng: -1.4796 });\n\tconst [ mapZoom, setMapZoom ] = useState(2);\n\tconst [ mapCountries, setMapCountries ] = useState([]);\n\tconst [ casesType, setCasesType ] = useState('cases');\n\n\t// useEffect(() => {\n\t// \tfetch('https://disease.sh/v3/covid-19/all')\n\t// \t\t.then((response) => {\n\t// \t\t\tconsole.log(response);\n\t// \t\t\tresponse.json();\n\t// \t\t})\n\t// \t\t.then((data) => {\n\t// \t\t\tconsole.log(data);\n\t// \t\t\tsetcountryInfo(data);\n\t// \t\t});\n\t// }, []);\n\n\tuseEffect(() => {\n\t\tconst getCountries = async () => {\n\t\t\tawait fetch('https://disease.sh/v3/covid-19/countries')\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((data) => {\n\t\t\t\t\tconst countries = data.map((country) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: country.country,\n\t\t\t\t\t\t\tvalue: country.countryInfo.iso2\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\n\t\t\t\t\tconst sortedData = sortData(data);\n\t\t\t\t\tsetCountries(countries);\n\t\t\t\t\tsetMapCountries(data);\n\t\t\t\t\tsetTableData(sortedData);\n\t\t\t\t});\n\t\t};\n\n\t\tconst getWorldInfo = async () => {\n\t\t\tawait fetch('https://disease.sh/v3/covid-19/all')\n\t\t\t\t.then((response) => {\n\t\t\t\t\treturn response.json();\n\t\t\t\t})\n\t\t\t\t.then((data) => {\n\t\t\t\t\t//console.log(data);\n\t\t\t\t\tsetcountryInfo(data);\n\t\t\t\t});\n\t\t};\n\n\t\tgetCountries();\n\t\tgetWorldInfo();\n\t}, []);\n\n\tconst onCountryChange = async (event) => {\n\t\tconst countryCode = event.target.value;\n\t\tconst url =\n\n\t\t\t\tcountryCode === 'Worldwide' ? 'https://disease.sh/v3/covid-19/all' :\n\t\t\t\t`https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\t\t// https://disease.sh/v3/covid-19/all\n\t\t// https://disease.sh/v3/covid-19/countries/{country}\n\n\t\tawait fetch(url).then((response) => response.json()).then((data) => {\n\t\t\tsetSelectedCountry(countryCode);\n\t\t\tsetcountryInfo(data);\n\t\t\tif (countryCode === 'Worldwide') {\n\t\t\t\tsetMapCenter({ lat: 34.80746, lng: -1.4796 });\n\t\t\t\tsetMapZoom(2);\n\t\t\t} else {\n\t\t\t\tsetMapCenter({ lat: data.countryInfo.lat, lng: data.countryInfo.long });\n\t\t\t\t//console.log(mapCenter);\n\t\t\t\tsetMapZoom(4);\n\t\t\t}\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"app__left\">\n\t\t\t\t<div className=\"app__header\">\n\t\t\t\t\t<div className=\"app__header__logo\">\n\t\t\t\t\t\t<div className=\"app__header-img\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<FormControl className={classes.formControl}>\n\t\t\t\t\t\t<Select value={selectedCountry} onChange={onCountryChange}>\n\t\t\t\t\t\t\t<MenuItem value=\"Worldwide\" key={0}>\n\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\tWorldwide{' '}\n\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t{countries.map((country, i) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem value={country.value} key={i + 1}>\n\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t{country.name}{' '}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"app__stats\">\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed={true}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\tsetCasesType('cases');\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tactive={casesType === 'cases'}\n\t\t\t\t\t\ttitle=\"Cases\"\n\t\t\t\t\t\tnewCases={'+' + prettyPrintStat(countryInfo.todayCases)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.cases) + ' Total'}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed={false}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\tsetCasesType('recovered');\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tactive={casesType === 'recovered'}\n\t\t\t\t\t\ttitle=\"Recovered\"\n\t\t\t\t\t\tnewCases={'+' + prettyPrintStat(countryInfo.todayRecovered)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.recovered) + ' Total'}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed={true}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\tsetCasesType('deaths');\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tactive={casesType === 'deaths'}\n\t\t\t\t\t\ttitle=\"Deaths\"\n\t\t\t\t\t\tnewCases={'+' + prettyPrintStat(countryInfo.todayDeaths)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.deaths) + ' Total'}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<Map\n\t\t\t\t\tcenter={mapCenter}\n\t\t\t\t\tzoom={mapZoom}\n\t\t\t\t\tcountries={mapCountries}\n\t\t\t\t\tcasesType={casesType}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<Card className=\"app__right\">\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3> Total Cases By Country </h3>\n\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t<LineGraph />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}